// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.unicamp.mc536.t2010s2a.forum.web;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.List;

import javax.validation.Valid;

import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Required;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.context.request.RequestAttributes;
import org.springframework.web.context.request.RequestContextHolder;

import br.unicamp.mc536.t2010s2a.forum.domain.ComentarioDocumento;
import br.unicamp.mc536.t2010s2a.forum.domain.Documento;
import br.unicamp.mc536.t2010s2a.forum.domain.Usuario;
import br.unicamp.mc536.t2010s2a.forum.reference.ReferenciaDocumento;
import br.unicamp.mc536.t2010s2a.forum.utils.Constantes;
import br.unicamp.mc536.t2010s2a.forum.utils.StringUtils;

privileged aspect ComentarioDocumentoController_Roo_Controller {

	@RequestMapping(method = RequestMethod.POST)
	public String ComentarioDocumentoController.create(
			@Valid ComentarioDocumento comentarioDocumento,
			BindingResult result, Model model) {

		// Obtem o usuario na sessão
		Usuario usuario = (Usuario) RequestContextHolder
				.currentRequestAttributes().getAttribute(
						Constantes.SESSION_USER,
						RequestAttributes.SCOPE_SESSION);

		if (usuario != null) {

			comentarioDocumento.setIdUsuario(usuario);

		}

		ComentarioDocumento comref = null;

		// Localiza o comentario para fazer referencia
		if (comentarioDocumento.getIdComentarioPai() != null) {

			comref = ComentarioDocumento
					.findComentarioDocumento(comentarioDocumento
							.getIdComentarioPai());

		}

		if (comref != null) {
			comentarioDocumento.setIdComentario(comref);
		}

		comentarioDocumento.setDtInclusao(new Date());

		if (result.hasErrors()) {
			model.addAttribute("comentarioDocumento", comentarioDocumento);
			addDateTimeFormatPatterns(model);
			return "comentariodocumentoes/create";
		}
		comentarioDocumento.persist();
		return "redirect:/comentariodocumentoes/" + comentarioDocumento.getId();
	}

	@RequestMapping(params = "form", method = RequestMethod.GET)
	public String ComentarioDocumentoController.createForm(
			@RequestParam(required = false, value = "id") String id, Model model) {

		ComentarioDocumento comref = null;

		// Localiza o comentario para fazer referencia
		if (!StringUtils.isBlankOrNull(id) && StringUtils.isLong(id)) {

			comref = ComentarioDocumento.findComentarioDocumento(new Long(id));

		}

		ComentarioDocumento com = new ComentarioDocumento();
		com.setDtInclusao(new Date());

		if (comref != null) {
			com.setIdComentario(comref);
			com.setIdComentarioPai(comref.getId());
		}

		model.addAttribute("comentarioDocumento", com);
		addDateTimeFormatPatterns(model);
		List dependencies = new ArrayList();
		if (Documento.countDocumentoes() == 0) {
			dependencies.add(new String[] { "idDocumento", "documentoes" });
		}
		model.addAttribute("dependencies", dependencies);
		return "comentariodocumentoes/create";
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public String ComentarioDocumentoController.show(
			@PathVariable("id") Long id, Model model) {
		addDateTimeFormatPatterns(model);

		ComentarioDocumento comentario = ComentarioDocumento
				.findComentarioDocumento(id);

		// Localiza os filhos
		if (comentario != null) {

			comentario.setComentariosFilhos(ComentarioDocumento
					.findComentarioFilhos(id));

		}

		model.addAttribute("comentariodocumento", comentario);

		model.addAttribute("itemId", id);
		return "comentariodocumentoes/show";
	}

	@RequestMapping(method = RequestMethod.GET)
	public String ComentarioDocumentoController.list(
			@RequestParam(value = "page", required = false) Integer page,
			@RequestParam(value = "size", required = false) Integer size,
			Model model) {
		if (page != null || size != null) {
			int sizeNo = size == null ? 10 : size.intValue();
			model.addAttribute("comentariodocumentoes", ComentarioDocumento
					.findComentarioDocumentoEntries(page == null ? 0 : (page
							.intValue() - 1)
							* sizeNo, sizeNo));
			float nrOfPages = (float) ComentarioDocumento
					.countComentarioDocumentoes()
					/ sizeNo;
			model
					.addAttribute(
							"maxPages",
							(int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1
									: nrOfPages));
		} else {
			model.addAttribute("comentariodocumentoes", ComentarioDocumento
					.findAllComentarioDocumentoes());
		}
		addDateTimeFormatPatterns(model);
		return "comentariodocumentoes/list";
	}

	@RequestMapping(method = RequestMethod.PUT)
	public String ComentarioDocumentoController.update(
			@Valid ComentarioDocumento comentarioDocumento,
			BindingResult result, Model model) {
		if (result.hasErrors()) {
			model.addAttribute("comentarioDocumento", comentarioDocumento);
			addDateTimeFormatPatterns(model);
			return "comentariodocumentoes/update";
		}
		comentarioDocumento.merge();
		return "redirect:/comentariodocumentoes/" + comentarioDocumento.getId();
	}

	@RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
	public String ComentarioDocumentoController.updateForm(
			@PathVariable("id") Long id, Model model) {
		model.addAttribute("comentarioDocumento", ComentarioDocumento
				.findComentarioDocumento(id));
		addDateTimeFormatPatterns(model);
		return "comentariodocumentoes/update";
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	public String ComentarioDocumentoController.delete(
			@PathVariable("id") Long id,
			@RequestParam(value = "page", required = false) Integer page,
			@RequestParam(value = "size", required = false) Integer size,
			Model model) {
		ComentarioDocumento.findComentarioDocumento(id).remove();
		model.addAttribute("page", (page == null) ? "1" : page.toString());
		model.addAttribute("size", (size == null) ? "10" : size.toString());
		return "redirect:/comentariodocumentoes?page="
				+ ((page == null) ? "1" : page.toString()) + "&size="
				+ ((size == null) ? "10" : size.toString());
	}

	@ModelAttribute("comentariodocumentoes")
	public Collection<ComentarioDocumento> ComentarioDocumentoController.populateComentarioDocumentoes() {
		return ComentarioDocumento.findAllComentarioDocumentoes();
	}

	@ModelAttribute("documentoes")
	public Collection<Documento> ComentarioDocumentoController.populateDocumentoes() {
		return Documento.findAllDocumentoes();
	}

	@ModelAttribute("usuarios")
	public Collection<Usuario> ComentarioDocumentoController.populateUsuarios() {
		return Usuario.findAllUsuarios();
	}

	@ModelAttribute("referenciadocumentoes")
	public Collection<ReferenciaDocumento> ComentarioDocumentoController.populateReferenciaDocumentoes() {
		return Arrays.asList(ReferenciaDocumento.class.getEnumConstants());
	}

	Converter<ComentarioDocumento, String> ComentarioDocumentoController.getComentarioDocumentoConverter() {
		return new Converter<ComentarioDocumento, String>() {
			public String convert(ComentarioDocumento comentarioDocumento) {
				return new StringBuilder().append(
						comentarioDocumento.getDsComentario()).append(" ")
						.append(comentarioDocumento.getDtInclusao()).toString();
			}
		};
	}

	Converter<Documento, String> ComentarioDocumentoController.getDocumentoConverter() {
		return new Converter<Documento, String>() {
			public String convert(Documento documento) {
				return new StringBuilder().append(documento.getNmDocumento())
						.append(" ").append(documento.getDsDocumento()).append(
								" ").append(documento.getNmArquivo())
						.toString();
			}
		};
	}

	Converter<Usuario, String> ComentarioDocumentoController.getUsuarioConverter() {
		return new Converter<Usuario, String>() {
			public String convert(Usuario usuario) {
				return new StringBuilder().append(usuario.getNmUsuario())
						.append(" ").append(usuario.getDsLogin()).append(" ")
						.append(usuario.getDsSenha()).toString();
			}
		};
	}

	@InitBinder
	void ComentarioDocumentoController.registerConverters(WebDataBinder binder) {
		if (binder.getConversionService() instanceof GenericConversionService) {
			GenericConversionService conversionService = (GenericConversionService) binder
					.getConversionService();
			conversionService.addConverter(getComentarioDocumentoConverter());
			conversionService.addConverter(getDocumentoConverter());
			conversionService.addConverter(getUsuarioConverter());
		}
	}

	void ComentarioDocumentoController.addDateTimeFormatPatterns(Model model) {
		model.addAttribute("comentarioDocumento_dtinclusao_date_format",
				DateTimeFormat.patternForStyle("S-", LocaleContextHolder
						.getLocale()));
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
	@ResponseBody
	public String ComentarioDocumentoController.showJson(
			@PathVariable("id") Long id) {
		return ComentarioDocumento.findComentarioDocumento(id).toJson();
	}

	@RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
	public ResponseEntity<String> ComentarioDocumentoController.createFromJson(
			@RequestBody String json) {
		ComentarioDocumento.fromJsonToComentarioDocumento(json).persist();
		return new ResponseEntity<String>("ComentarioDocumento created",
				HttpStatus.CREATED);
	}

	@RequestMapping(headers = "Accept=application/json")
	@ResponseBody
	public String ComentarioDocumentoController.listJson() {
		return ComentarioDocumento.toJsonArray(ComentarioDocumento
				.findAllComentarioDocumentoes());
	}

	@RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
	public ResponseEntity<String> ComentarioDocumentoController.createFromJsonArray(
			@RequestBody String json) {
		for (ComentarioDocumento comentariodocumento : ComentarioDocumento
				.fromJsonArrayToComentarioDocumentoes(json)) {
			comentariodocumento.persist();
		}
		return new ResponseEntity<String>("ComentarioDocumento created",
				HttpStatus.CREATED);
	}

}
