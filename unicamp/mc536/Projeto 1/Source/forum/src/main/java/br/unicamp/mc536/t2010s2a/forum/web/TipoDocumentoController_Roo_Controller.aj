// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.unicamp.mc536.t2010s2a.forum.web;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;

import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.support.RequestContextUtils;

import br.unicamp.mc536.t2010s2a.forum.domain.TipoDocumento;



privileged aspect TipoDocumentoController_Roo_Controller {

	@RequestMapping(method = RequestMethod.POST)
	public String TipoDocumentoController.create(
			@Valid TipoDocumento tipoDocumento, BindingResult result,
			Model model, HttpServletRequest request) {

		if (result.hasErrors()) {
			model.addAttribute("tipoDocumento", tipoDocumento);
			return "tipodocumentoes/create";
		}

		// Consulta o documento pela descrição
		List<TipoDocumento> tipos = TipoDocumento
				.findTipoDocumentoByNome(tipoDocumento.getNmTipoDocumento());

		// Caso já encontre o tipo de documento
		if (tipos == null || tipos.size() == 1) {

			FieldError fieldMessage = new FieldError("tipoDocumento",
					"nmTipoDocumento", this.getBundle().getMessage(
							"msg.tipo_documento.tipo_documento_ja_cadastrado",
							null, RequestContextUtils.getLocale(request)));
			result.addError(fieldMessage);

			model.addAttribute("tipoDocumento", tipoDocumento);

			return "tipodocumentoes/create";

		} else {

			tipoDocumento.persist();
			return "redirect:/tipodocumentoes/" + tipoDocumento.getId();

		}
	}

	@RequestMapping(params = "form", method = RequestMethod.GET)
	public String TipoDocumentoController.createForm(Model model) {
		model.addAttribute("tipoDocumento", new TipoDocumento());
		return "tipodocumentoes/create";
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.GET)
	public String TipoDocumentoController.show(@PathVariable("id") Long id,
			Model model) {
		model
				.addAttribute("tipodocumento", TipoDocumento
						.findTipoDocumento(id));
		model.addAttribute("itemId", id);
		return "tipodocumentoes/show";
	}

	@RequestMapping(method = RequestMethod.GET)
	public String TipoDocumentoController.list(
			@RequestParam(value = "page", required = false) Integer page,
			@RequestParam(value = "size", required = false) Integer size,
			Model model) {
		if (page != null || size != null) {
			int sizeNo = size == null ? 10 : size.intValue();
			model.addAttribute("tipodocumentoes", TipoDocumento
					.findTipoDocumentoEntries(page == null ? 0 : (page
							.intValue() - 1)
							* sizeNo, sizeNo));
			float nrOfPages = (float) TipoDocumento.countTipoDocumentoes()
					/ sizeNo;
			model
					.addAttribute(
							"maxPages",
							(int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1
									: nrOfPages));
		} else {
			model.addAttribute("tipodocumentoes", TipoDocumento
					.findAllTipoDocumentoes());
		}
		return "tipodocumentoes/list";
	}

	@RequestMapping(method = RequestMethod.PUT)
	public String TipoDocumentoController.update(
			@Valid TipoDocumento tipoDocumento, BindingResult result,
			Model model) {
		if (result.hasErrors()) {
			model.addAttribute("tipoDocumento", tipoDocumento);
			return "tipodocumentoes/update";
		}
		tipoDocumento.merge();
		return "redirect:/tipodocumentoes/" + tipoDocumento.getId();
	}

	@RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
	public String TipoDocumentoController.updateForm(
			@PathVariable("id") Long id, Model model) {
		model
				.addAttribute("tipoDocumento", TipoDocumento
						.findTipoDocumento(id));
		return "tipodocumentoes/update";
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
	public String TipoDocumentoController.delete(@PathVariable("id") Long id,
			@RequestParam(value = "page", required = false) Integer page,
			@RequestParam(value = "size", required = false) Integer size,
			Model model) {
		TipoDocumento.findTipoDocumento(id).remove();
		model.addAttribute("page", (page == null) ? "1" : page.toString());
		model.addAttribute("size", (size == null) ? "10" : size.toString());
		return "redirect:/tipodocumentoes?page="
				+ ((page == null) ? "1" : page.toString()) + "&size="
				+ ((size == null) ? "10" : size.toString());
	}

	Converter<TipoDocumento, String> TipoDocumentoController.getTipoDocumentoConverter() {
		return new Converter<TipoDocumento, String>() {
			public String convert(TipoDocumento tipoDocumento) {
				return new StringBuilder().append(
						tipoDocumento.getNmTipoDocumento()).append(" ").append(
						tipoDocumento.getDsTipoDocumento()).append(" ").append(
						tipoDocumento.getDsDetalhadoTipoDocumento()).toString();
			}
		};
	}

	@InitBinder
	void TipoDocumentoController.registerConverters(WebDataBinder binder) {
		if (binder.getConversionService() instanceof GenericConversionService) {
			GenericConversionService conversionService = (GenericConversionService) binder
					.getConversionService();
			conversionService.addConverter(getTipoDocumentoConverter());
		}
	}

	@RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
	@ResponseBody
	public String TipoDocumentoController.showJson(@PathVariable("id") Long id) {
		return TipoDocumento.findTipoDocumento(id).toJson();
	}

	@RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
	public ResponseEntity<String> TipoDocumentoController.createFromJson(
			@RequestBody String json) {
		TipoDocumento.fromJsonToTipoDocumento(json).persist();
		return new ResponseEntity<String>("TipoDocumento created",
				HttpStatus.CREATED);
	}

	@RequestMapping(headers = "Accept=application/json")
	@ResponseBody
	public String TipoDocumentoController.listJson() {
		return TipoDocumento
				.toJsonArray(TipoDocumento.findAllTipoDocumentoes());
	}

	@RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
	public ResponseEntity<String> TipoDocumentoController.createFromJsonArray(
			@RequestBody String json) {
		for (TipoDocumento tipodocumento : TipoDocumento
				.fromJsonArrayToTipoDocumentoes(json)) {
			tipodocumento.persist();
		}
		return new ResponseEntity<String>("TipoDocumento created",
				HttpStatus.CREATED);
	}

}
