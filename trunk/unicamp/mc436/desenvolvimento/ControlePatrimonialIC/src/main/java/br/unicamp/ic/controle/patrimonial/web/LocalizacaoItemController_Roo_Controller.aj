// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.unicamp.ic.controle.patrimonial.web;

import br.unicamp.ic.controle.patrimonial.domain.Area;
import br.unicamp.ic.controle.patrimonial.domain.Item;
import br.unicamp.ic.controle.patrimonial.domain.LocalizacaoItem;
import br.unicamp.ic.controle.patrimonial.domain.Usuario;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect LocalizacaoItemController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String LocalizacaoItemController.create(@Valid LocalizacaoItem localizacaoItem, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("localizacaoItem", localizacaoItem);
            addDateTimeFormatPatterns(uiModel);
            return "localizacaoitems/create";
        }
        uiModel.asMap().clear();
        localizacaoItem.persist();
        return "redirect:/localizacaoitems/" + encodeUrlPathSegment(localizacaoItem.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String LocalizacaoItemController.createForm(Model uiModel) {
        uiModel.addAttribute("localizacaoItem", new LocalizacaoItem());
        addDateTimeFormatPatterns(uiModel);
        List dependencies = new ArrayList();
        if (Area.countAreas() == 0) {
            dependencies.add(new String[]{"area", "areas"});
        }
        if (Item.countItems() == 0) {
            dependencies.add(new String[]{"item", "items"});
        }
        if (Usuario.countUsuarios() == 0) {
            dependencies.add(new String[]{"usuario", "usuarios"});
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "localizacaoitems/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String LocalizacaoItemController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("localizacaoitem", LocalizacaoItem.findLocalizacaoItem(id));
        uiModel.addAttribute("itemId", id);
        return "localizacaoitems/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String LocalizacaoItemController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("localizacaoitems", LocalizacaoItem.findLocalizacaoItemEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) LocalizacaoItem.countLocalizacaoItems() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("localizacaoitems", LocalizacaoItem.findAllLocalizacaoItems());
        }
        addDateTimeFormatPatterns(uiModel);
        return "localizacaoitems/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String LocalizacaoItemController.update(@Valid LocalizacaoItem localizacaoItem, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("localizacaoItem", localizacaoItem);
            addDateTimeFormatPatterns(uiModel);
            return "localizacaoitems/update";
        }
        uiModel.asMap().clear();
        localizacaoItem.merge();
        return "redirect:/localizacaoitems/" + encodeUrlPathSegment(localizacaoItem.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String LocalizacaoItemController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("localizacaoItem", LocalizacaoItem.findLocalizacaoItem(id));
        addDateTimeFormatPatterns(uiModel);
        return "localizacaoitems/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String LocalizacaoItemController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        LocalizacaoItem.findLocalizacaoItem(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/localizacaoitems";
    }
    
    @ModelAttribute("areas")
    public Collection<Area> LocalizacaoItemController.populateAreas() {
        return Area.findAllAreas();
    }
    
    @ModelAttribute("items")
    public Collection<Item> LocalizacaoItemController.populateItems() {
        return Item.findAllItems();
    }
    
    @ModelAttribute("localizacaoitems")
    public Collection<LocalizacaoItem> LocalizacaoItemController.populateLocalizacaoItems() {
        return LocalizacaoItem.findAllLocalizacaoItems();
    }
    
    @ModelAttribute("usuarios")
    public Collection<Usuario> LocalizacaoItemController.populateUsuarios() {
        return Usuario.findAllUsuarios();
    }
    
    void LocalizacaoItemController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("localizacaoItem_dtatualizacao_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    String LocalizacaoItemController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
