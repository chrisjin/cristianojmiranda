// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.unicamp.mc536.t2010s2a.forum.web;

import br.unicamp.mc536.t2010s2a.forum.domain.RedeTrabalho;
import br.unicamp.mc536.t2010s2a.forum.domain.RedeTrabalhoUsuario;
import br.unicamp.mc536.t2010s2a.forum.domain.Usuario;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.validation.Valid;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect RedeTrabalhoUsuarioController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String RedeTrabalhoUsuarioController.create(@Valid RedeTrabalhoUsuario redeTrabalhoUsuario, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("redeTrabalhoUsuario", redeTrabalhoUsuario);
            return "redetrabalhousuarios/create";
        }
        redeTrabalhoUsuario.persist();
        return "redirect:/redetrabalhousuarios/" + redeTrabalhoUsuario.getId();
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String RedeTrabalhoUsuarioController.createForm(Model model) {
        model.addAttribute("redeTrabalhoUsuario", new RedeTrabalhoUsuario());
        List dependencies = new ArrayList();
        if (RedeTrabalho.countRedeTrabalhoes() == 0) {
            dependencies.add(new String[]{"idRedeTrabalho", "redetrabalhoes"});
        }
        if (Usuario.countUsuarios() == 0) {
            dependencies.add(new String[]{"idUsuario", "usuarios"});
        }
        model.addAttribute("dependencies", dependencies);
        return "redetrabalhousuarios/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String RedeTrabalhoUsuarioController.show(@PathVariable("id") Long id, Model model) {
        model.addAttribute("redetrabalhousuario", RedeTrabalhoUsuario.findRedeTrabalhoUsuario(id));
        model.addAttribute("itemId", id);
        return "redetrabalhousuarios/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String RedeTrabalhoUsuarioController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("redetrabalhousuarios", RedeTrabalhoUsuario.findRedeTrabalhoUsuarioEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) RedeTrabalhoUsuario.countRedeTrabalhoUsuarios() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("redetrabalhousuarios", RedeTrabalhoUsuario.findAllRedeTrabalhoUsuarios());
        }
        return "redetrabalhousuarios/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String RedeTrabalhoUsuarioController.update(@Valid RedeTrabalhoUsuario redeTrabalhoUsuario, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("redeTrabalhoUsuario", redeTrabalhoUsuario);
            return "redetrabalhousuarios/update";
        }
        redeTrabalhoUsuario.merge();
        return "redirect:/redetrabalhousuarios/" + redeTrabalhoUsuario.getId();
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String RedeTrabalhoUsuarioController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("redeTrabalhoUsuario", RedeTrabalhoUsuario.findRedeTrabalhoUsuario(id));
        return "redetrabalhousuarios/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String RedeTrabalhoUsuarioController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        RedeTrabalhoUsuario.findRedeTrabalhoUsuario(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/redetrabalhousuarios?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @ModelAttribute("redetrabalhoes")
    public Collection<RedeTrabalho> RedeTrabalhoUsuarioController.populateRedeTrabalhoes() {
        return RedeTrabalho.findAllRedeTrabalhoes();
    }
    
    @ModelAttribute("usuarios")
    public Collection<Usuario> RedeTrabalhoUsuarioController.populateUsuarios() {
        return Usuario.findAllUsuarios();
    }
    
    Converter<RedeTrabalho, String> RedeTrabalhoUsuarioController.getRedeTrabalhoConverter() {
        return new Converter<RedeTrabalho, String>() {
            public String convert(RedeTrabalho redeTrabalho) {
                return new StringBuilder().append(redeTrabalho.getNmRedetrabalho()).append(" ").append(redeTrabalho.getDsRedetrabalho()).append(" ").append(redeTrabalho.getDsDetalhadoRedetrabalho()).toString();
            }
        };
    }
    
    Converter<Usuario, String> RedeTrabalhoUsuarioController.getUsuarioConverter() {
        return new Converter<Usuario, String>() {
            public String convert(Usuario usuario) {
                return new StringBuilder().append(usuario.getNmUsuario()).append(" ").append(usuario.getDsLogin()).append(" ").append(usuario.getDsSenha()).toString();
            }
        };
    }
    
    @InitBinder
    void RedeTrabalhoUsuarioController.registerConverters(WebDataBinder binder) {
        if (binder.getConversionService() instanceof GenericConversionService) {
            GenericConversionService conversionService = (GenericConversionService) binder.getConversionService();
            conversionService.addConverter(getRedeTrabalhoConverter());
            conversionService.addConverter(getUsuarioConverter());
        }
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public String RedeTrabalhoUsuarioController.showJson(@PathVariable("id") Long id) {
        return RedeTrabalhoUsuario.findRedeTrabalhoUsuario(id).toJson();
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> RedeTrabalhoUsuarioController.createFromJson(@RequestBody String json) {
        RedeTrabalhoUsuario.fromJsonToRedeTrabalhoUsuario(json).persist();
        return new ResponseEntity<String>("RedeTrabalhoUsuario created", HttpStatus.CREATED);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public String RedeTrabalhoUsuarioController.listJson() {
        return RedeTrabalhoUsuario.toJsonArray(RedeTrabalhoUsuario.findAllRedeTrabalhoUsuarios());
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> RedeTrabalhoUsuarioController.createFromJsonArray(@RequestBody String json) {
        for (RedeTrabalhoUsuario redetrabalhousuario: RedeTrabalhoUsuario.fromJsonArrayToRedeTrabalhoUsuarios(json)) {
            redetrabalhousuario.persist();
        }
        return new ResponseEntity<String>("RedeTrabalhoUsuario created", HttpStatus.CREATED);
    }
    
}
