// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.unicamp.mc536.t2010s2a.forum.web;

import br.unicamp.mc536.t2010s2a.forum.domain.Pais;
import java.lang.Long;
import java.lang.String;
import javax.validation.Valid;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect PaisController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String PaisController.create(@Valid Pais pais, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("pais", pais);
            return "paises/create";
        }
        pais.persist();
        return "redirect:/paises/" + pais.getId();
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String PaisController.createForm(Model model) {
        model.addAttribute("pais", new Pais());
        return "paises/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String PaisController.show(@PathVariable("id") Long id, Model model) {
        model.addAttribute("pais", Pais.findPais(id));
        model.addAttribute("itemId", id);
        return "paises/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String PaisController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("paises", Pais.findPaisEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) Pais.countPaises() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("paises", Pais.findAllPaises());
        }
        return "paises/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String PaisController.update(@Valid Pais pais, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("pais", pais);
            return "paises/update";
        }
        pais.merge();
        return "redirect:/paises/" + pais.getId();
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String PaisController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("pais", Pais.findPais(id));
        return "paises/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String PaisController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        Pais.findPais(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/paises?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    Converter<Pais, String> PaisController.getPaisConverter() {
        return new Converter<Pais, String>() {
            public String convert(Pais pais) {
                return new StringBuilder().append(pais.getNmPais()).append(" ").append(pais.getDsPais()).toString();
            }
        };
    }
    
    @InitBinder
    void PaisController.registerConverters(WebDataBinder binder) {
        if (binder.getConversionService() instanceof GenericConversionService) {
            GenericConversionService conversionService = (GenericConversionService) binder.getConversionService();
            conversionService.addConverter(getPaisConverter());
        }
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public String PaisController.showJson(@PathVariable("id") Long id) {
        return Pais.findPais(id).toJson();
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> PaisController.createFromJson(@RequestBody String json) {
        Pais.fromJsonToPais(json).persist();
        return new ResponseEntity<String>("Pais created", HttpStatus.CREATED);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public String PaisController.listJson() {
        return Pais.toJsonArray(Pais.findAllPaises());
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> PaisController.createFromJsonArray(@RequestBody String json) {
        for (Pais pais: Pais.fromJsonArrayToPaises(json)) {
            pais.persist();
        }
        return new ResponseEntity<String>("Pais created", HttpStatus.CREATED);
    }
    
}
