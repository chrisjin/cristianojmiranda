// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.unicamp.mc536.t2010s2a.forum.domain;

import java.sql.Blob;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.persistence.Column;
import javax.persistence.EntityManager;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;
import javax.persistence.Version;

import org.hibernate.Hibernate;
import org.springframework.transaction.annotation.Transactional;

import br.unicamp.mc536.t2010s2a.forum.utils.StringUtils;


privileged aspect Documento_Roo_Entity {

	@PersistenceContext
	transient EntityManager Documento.entityManager;

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "id")
	private Long Documento.id;

	@Version
	@Column(name = "version")
	private Integer Documento.version;

	public Long Documento.getId() {
		return this.id;
	}

	public void Documento.setId(Long id) {
		this.id = id;
	}

	public Integer Documento.getVersion() {
		return this.version;
	}

	public void Documento.setVersion(Integer version) {
		this.version = version;
	}

	@Transactional
	public void Documento.persist() {
		if (this.entityManager == null)
			this.entityManager = entityManager();

		if (this.getFileUploadBean() != null
				&& this.getFileUploadBean().getFile() != null
				&& !this.getFileUploadBean().getFile().isEmpty()) {

			// Seta o nome do arquivo
			this.setNmArquivo(this.getFileUploadBean().getFile().getFileItem()
					.getName());

			// Converte o array de byte em um blob para ser persistido
			Blob documento = Hibernate.createBlob(this.getFileUploadBean()
					.getFile().getBytes());

			this.setDocumento(documento);

		}

		this.entityManager.persist(this);

		// Faz o parse das palavras chaves
		if (!StringUtils.isBlankOrNull(this.getAux1())) {

			String[] palavrasArr = this.getAux1().split(";;");
			if (palavrasArr != null) {

				for (String palavra : palavrasArr) {

					String[] pArr = palavra.split(":;");
					if (pArr != null && pArr.length >= 2) {

						String palavraIdioma = pArr[0];
						String idIdioma = pArr[1];

						if (!StringUtils.isBlankOrNull(palavra)
								&& !StringUtils.isBlankOrNull(idIdioma)) {

							Idioma idioma = Idioma
									.findIdioma(new Long(idIdioma));

							PalavraDocumento p = new PalavraDocumento();
							p.setDsPalavrasChaves(palavraIdioma);
							p.setIdDocumento(this);
							p.setIdIdioma(idioma);
							this.entityManager.persist(p);

						}

					}

				}

			}

		}

	}

	@Transactional
	public void Documento.remove() {
		if (this.entityManager == null)
			this.entityManager = entityManager();
		if (this.entityManager.contains(this)) {
			this.entityManager.remove(this);
		} else {
			Documento attached = this.entityManager.find(this.getClass(),
					this.id);
			this.entityManager.remove(attached);
		}
	}

	@Transactional
	public void Documento.flush() {
		if (this.entityManager == null)
			this.entityManager = entityManager();
		this.entityManager.flush();
	}

	@Transactional
	public Documento Documento.merge() {
		if (this.entityManager == null)
			this.entityManager = entityManager();
		Documento merged = this.entityManager.merge(this);
		this.entityManager.flush();
		return merged;
	}

	public static final EntityManager Documento.entityManager() {
		EntityManager em = new Documento().entityManager;
		if (em == null)
			throw new IllegalStateException(
					"Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
		return em;
	}

	public static long Documento.countDocumentoes() {
		return ((Number) entityManager().createQuery(
				"select count(o) from Documento o").getSingleResult())
				.longValue();
	}

	@SuppressWarnings("unchecked")
	public static List<Documento> Documento.findAllDocumentoes() {
		return entityManager().createQuery("select o from Documento o")
				.getResultList();
	}

	/**
	 * @param filtro
	 * @return
	 */
	@SuppressWarnings("unchecked")
	public static List<Documento> Documento.findDocumentoByFiltro(
			Documento filtro) {

		// Monta o filtro de consulta
		StringBuffer sql = new StringBuffer("select o from Documento o ");

		if (filtro.getId() == null) {

			if (filtro != null) {

				sql.append(" where 1L = 1L ");

				if (!StringUtils.isBlankOrNull(filtro.getNmDocumento())) {
					sql
							.append(" and upper(trim(o.nmDocumento)) = upper(trim('");
					sql.append(filtro.getNmDocumento());
					sql.append("')) ");
				}

				if (!StringUtils.isBlankOrNull(filtro.getNmAutor())) {

					sql.append(" and upper(trim(o.nmAutor)) = upper(trim('");
					sql.append(filtro.getNmAutor());
					sql.append("')) ");

				}

				if (filtro.getTipoDocumento() != null) {

					sql.append(" and o.tipoDocumento.id = ");
					sql.append(filtro.getTipoDocumento().getId());
				}

				if (filtro.getIdIdiomaDocumento() != null) {

					sql.append(" and o.idIdiomaDocumento.id = ");
					sql.append(filtro.getIdIdiomaDocumento().getId());
				}

				if (filtro.getIdPrograma() != null) {

					sql.append(" and o.idPrograma.id = ");
					sql.append(filtro.getIdPrograma().getId());
				}

				if (filtro.getIdRedeTrabalho() != null) {

					sql.append(" and o.idRedeTrabalho.id = ");
					sql.append(filtro.getIdRedeTrabalho().getId());
				}

				if (filtro.getIdPais() != null) {

					sql.append(" and o.idPais.id = ");
					sql.append(filtro.getIdPais().getId());
				}

			}
		} else {

			sql.append("where o.id = ");
			sql.append(filtro.getId());

		}

		return entityManager().createQuery(sql.toString()).getResultList();
	}

	public static Documento Documento.findDocumento(Long id) {
		if (id == null)
			return null;

		Documento doc = entityManager().find(Documento.class, id);
		if (doc != null) {

			// Consulta as palavras associadas ao documento
			doc.setPalavrasAssociadas(PalavraDocumento
					.findPalavraDocumentoByDocumento(id));

			// Consulta os comentarios do documento
			doc.setComentarios(ComentarioDocumento
					.findComentarioDocumentosByDocumento(id));

			// Consulta os usuarios vinculados ao documento
			doc.setUsuariosVinculados(UsuarioDocumento
					.findUsuarioDocumentosByDocumento(id));

			// Consulta Descrição do documento
			doc.setDescricaoDocumentos(DescricaoDocumento
					.findDescricaoDocumentosByDocumento(id));

			// Consulta os documentos vinculados
			doc.setVinculos(DocumentoVinculo
					.findDocumentoVinculosByDocumento(id));

			// Consulta os paises relacionados ao documento
			doc.setReferenciaPaises(DocumentoReferenciaPais
					.findDocumentoReferenciaPaisesByDocumento(id));

		}
		return doc;
	}

	@SuppressWarnings("unchecked")
	public static List<Documento> Documento.findDocumentoEntries(
			int firstResult, int maxResults) {
		return entityManager().createQuery("select o from Documento o")
				.setFirstResult(firstResult).setMaxResults(maxResults)
				.getResultList();
	}

	@SuppressWarnings("unchecked")
	public static List<Documento> Documento.findDocumentoOrderByVisualizacao() {
		return entityManager().createQuery(
				"select o from Documento o order by o.qtdVisualizacao desc")
				.getResultList();
	}

	@SuppressWarnings("unchecked")
	public static List<Documento> Documento.findDocumentoMultilinguismoBrasil() {
		return entityManager()
				.createQuery(
						"select o from Documento o where o.idPrograma.nmPrograma = 'Multinguismo no Brasil'")
				.getResultList();
	}

	@SuppressWarnings("unchecked")
	public static List<Object[]> Documento.findDocumentoPreferenciaPrograma() {

		String sql = "SELECT u.nm_usuario, p.nm_programa, count(d.nm_arquivo) from usuario_documento ud inner join usuario u on ud.id_usuario = u.id  inner join documento d on d.id = ud.id_documento  inner join programa p on d.id_programa = p.id group by u.nm_usuario, p.nm_programa ";
		Query query = entityManager().createNativeQuery(sql);

		List<Object[]> result = query.getResultList();

		return result;
	}

	@SuppressWarnings("unchecked")
	public static List<Object[]> Documento.findDocumentoByIntervaloGroupByPais() {

		Calendar calendar = Calendar.getInstance();
		calendar.setTime(new Date());

		SimpleDateFormat dtFormat = new SimpleDateFormat("yyyy/MM/dd");

		// Remove um ano
		calendar.add(Calendar.YEAR, -1);
		String dtInicial = dtFormat.format(calendar.getTime());
		String dtFinal = dtFormat.format(new Date());

		StringBuffer sql = new StringBuffer(
				"select p.nm_pais, count(d.nm_arquivo) from documento d ");
		sql.append(" inner join pais p on d.id_pais = p.id ");
		sql.append(" where d.dt_inclusao <= '" + dtFinal
				+ "' and d.dt_inclusao >= '" + dtInicial + "'");
		sql.append(" group by 1 ");
		sql.append(" order by 2 desc");
		Query query = entityManager().createNativeQuery(sql.toString());

		List<Object[]> result = query.getResultList();

		return result;
	}

	@SuppressWarnings("unchecked")
	public static List<Object[]> Documento.findDocumentoByIntervaloGroupByPrograma() {

		Calendar calendar = Calendar.getInstance();
		calendar.setTime(new Date());

		SimpleDateFormat dtFormat = new SimpleDateFormat("yyyy/MM/dd");

		// Remove um ano
		calendar.add(Calendar.YEAR, -1);
		String dtInicial = dtFormat.format(calendar.getTime());
		String dtFinal = dtFormat.format(new Date());

		StringBuffer sql = new StringBuffer(
				"select p.nm_programa, count(d.nm_arquivo) from documento d ");
		sql.append(" inner join programa p on d.id_programa=p.id ");
		sql.append(" where d.dt_inclusao <='" + dtFinal
				+ "' and d.dt_inclusao >= '" + dtInicial + "' ");
		sql.append(" group by 1 order by 2 desc");
		Query query = entityManager().createNativeQuery(sql.toString());

		List<Object[]> result = query.getResultList();

		return result;
	}

	@SuppressWarnings("unchecked")
	public static List<Object[]> Documento.findProgramasMaisComentados() {

		StringBuffer sql = new StringBuffer(
				"select p.nm_programa, count(cd.id) from documento d ");
		sql
				.append(" inner join comentario_documento cd on cd.id_documento = d.id ");
		sql.append(" inner join programa p on d.id_programa = p.id ");
		sql.append(" group by p.id ");
		sql.append(" order by 2 desc ");
		Query query = entityManager().createNativeQuery(sql.toString());

		List<Object[]> result = query.getResultList();

		return result;
	}

	@SuppressWarnings("unchecked")
	public static List<Object[]> Documento.findDocumentoByIntervaloGroupByProgramaAndPais() {

		Calendar calendar = Calendar.getInstance();
		calendar.setTime(new Date());

		SimpleDateFormat dtFormat = new SimpleDateFormat("yyyy/MM/dd");

		// Remove um ano
		calendar.add(Calendar.YEAR, -1);
		String dtInicial = dtFormat.format(calendar.getTime());
		String dtFinal = dtFormat.format(new Date());

		StringBuffer sql = new StringBuffer(
				"select pais.pais, programa.programa, pais.QuantidadeDocumentosPostados, programa.QuantidadeDocumentosPostados from ");
		sql
				.append(" (select p.nm_pais as pais, count(d.nm_arquivo) as QuantidadeDocumentosPostados from documento d ");
		sql.append(" inner join pais p on d.id_pais=p.id ");
		sql.append(" where d.dt_inclusao <='" + dtFinal
				+ "' and d.dt_inclusao >= '" + dtInicial + "' ");
		sql.append(" group by 1 ");
		sql.append(" order by 2 desc ");
		sql.append(" )pais ");
		sql.append(" inner join ");
		sql
				.append(" ( select p2.nm_pais as pais, p.nm_programa as programa, count(d.nm_arquivo) as QuantidadeDocumentosPostados from documento d ");
		sql.append(" inner join programa p on d.id_programa=p.id ");
		sql.append(" inner join pais p2 on d.id_pais = p2.id ");
		sql.append(" where d.dt_inclusao <='" + dtFinal
				+ "' and d.dt_inclusao >= '" + dtInicial + "' ");
		sql.append(" group by 1, 2 ");
		sql.append(" order by 3 desc ");
		sql.append(" )programa ");
		sql.append(" on pais.pais=programa.pais ");
		sql.append(" order by 3,4 desc ");

		Query query = entityManager().createNativeQuery(sql.toString());

		List<Object[]> result = query.getResultList();

		return result;
	}
}
