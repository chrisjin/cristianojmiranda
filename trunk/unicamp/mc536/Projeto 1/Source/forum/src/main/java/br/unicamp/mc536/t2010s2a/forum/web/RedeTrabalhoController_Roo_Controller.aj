// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package br.unicamp.mc536.t2010s2a.forum.web;

import br.unicamp.mc536.t2010s2a.forum.domain.RedeTrabalho;
import br.unicamp.mc536.t2010s2a.forum.domain.Usuario;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.core.convert.converter.Converter;
import org.springframework.core.convert.support.GenericConversionService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

privileged aspect RedeTrabalhoController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String RedeTrabalhoController.create(@Valid RedeTrabalho redeTrabalho, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("redeTrabalho", redeTrabalho);
            addDateTimeFormatPatterns(model);
            return "redetrabalhoes/create";
        }
        redeTrabalho.persist();
        return "redirect:/redetrabalhoes/" + redeTrabalho.getId();
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String RedeTrabalhoController.createForm(Model model) {
        model.addAttribute("redeTrabalho", new RedeTrabalho());
        addDateTimeFormatPatterns(model);
        List dependencies = new ArrayList();
        if (Usuario.countUsuarios() == 0) {
            dependencies.add(new String[]{"idUsuario", "usuarios"});
        }
        model.addAttribute("dependencies", dependencies);
        return "redetrabalhoes/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String RedeTrabalhoController.show(@PathVariable("id") Long id, Model model) {
        addDateTimeFormatPatterns(model);
        model.addAttribute("redetrabalho", RedeTrabalho.findRedeTrabalho(id));
        model.addAttribute("itemId", id);
        return "redetrabalhoes/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String RedeTrabalhoController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("redetrabalhoes", RedeTrabalho.findRedeTrabalhoEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) RedeTrabalho.countRedeTrabalhoes() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("redetrabalhoes", RedeTrabalho.findAllRedeTrabalhoes());
        }
        addDateTimeFormatPatterns(model);
        return "redetrabalhoes/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String RedeTrabalhoController.update(@Valid RedeTrabalho redeTrabalho, BindingResult result, Model model) {
        if (result.hasErrors()) {
            model.addAttribute("redeTrabalho", redeTrabalho);
            addDateTimeFormatPatterns(model);
            return "redetrabalhoes/update";
        }
        redeTrabalho.merge();
        return "redirect:/redetrabalhoes/" + redeTrabalho.getId();
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String RedeTrabalhoController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("redeTrabalho", RedeTrabalho.findRedeTrabalho(id));
        addDateTimeFormatPatterns(model);
        return "redetrabalhoes/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String RedeTrabalhoController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        RedeTrabalho.findRedeTrabalho(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/redetrabalhoes?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @ModelAttribute("usuarios")
    public Collection<Usuario> RedeTrabalhoController.populateUsuarios() {
        return Usuario.findAllUsuarios();
    }
    
    Converter<RedeTrabalho, String> RedeTrabalhoController.getRedeTrabalhoConverter() {
        return new Converter<RedeTrabalho, String>() {
            public String convert(RedeTrabalho redeTrabalho) {
                return new StringBuilder().append(redeTrabalho.getNmRedetrabalho()).append(" ").append(redeTrabalho.getDsRedetrabalho()).append(" ").append(redeTrabalho.getDsDetalhadoRedetrabalho()).toString();
            }
        };
    }
    
    Converter<Usuario, String> RedeTrabalhoController.getUsuarioConverter() {
        return new Converter<Usuario, String>() {
            public String convert(Usuario usuario) {
                return new StringBuilder().append(usuario.getNmUsuario()).append(" ").append(usuario.getDsLogin()).append(" ").append(usuario.getDsSenha()).toString();
            }
        };
    }
    
    @InitBinder
    void RedeTrabalhoController.registerConverters(WebDataBinder binder) {
        if (binder.getConversionService() instanceof GenericConversionService) {
            GenericConversionService conversionService = (GenericConversionService) binder.getConversionService();
            conversionService.addConverter(getRedeTrabalhoConverter());
            conversionService.addConverter(getUsuarioConverter());
        }
    }
    
    void RedeTrabalhoController.addDateTimeFormatPatterns(Model model) {
        model.addAttribute("redeTrabalho_dtinclusao_date_format", DateTimeFormat.patternForStyle("S-", LocaleContextHolder.getLocale()));
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public String RedeTrabalhoController.showJson(@PathVariable("id") Long id) {
        return RedeTrabalho.findRedeTrabalho(id).toJson();
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> RedeTrabalhoController.createFromJson(@RequestBody String json) {
        RedeTrabalho.fromJsonToRedeTrabalho(json).persist();
        return new ResponseEntity<String>("RedeTrabalho created", HttpStatus.CREATED);
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public String RedeTrabalhoController.listJson() {
        return RedeTrabalho.toJsonArray(RedeTrabalho.findAllRedeTrabalhoes());
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public ResponseEntity<String> RedeTrabalhoController.createFromJsonArray(@RequestBody String json) {
        for (RedeTrabalho redetrabalho: RedeTrabalho.fromJsonArrayToRedeTrabalhoes(json)) {
            redetrabalho.persist();
        }
        return new ResponseEntity<String>("RedeTrabalho created", HttpStatus.CREATED);
    }
    
}
